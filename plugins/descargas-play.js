import fetch from 'node-fetch';

// Define las APIs de descarga de Spotify aqu√≠, puedes a√±adir m√°s si encuentras
const SPOTIFY_DOWNLOAD_APIS = [
  { name: 'Nekorinn', urlBuilder: (query) => `https://api.nekorinn.my.id/downloader/spotifyplay?q=${encodeURIComponent(query)}` },
  // Si encuentras otras APIs de descarga de Spotify que funcionen, a√±√°delas aqu√≠.
  // Ejemplo: { name: 'Otra API', urlBuilder: (query) => `https://otraapi.com/spotify?q=${encodeURIComponent(query)}` },
];

/**
 * Tries to download Spotify audio from a list of APIs until one succeeds.
 * @param {string} query - The search query for the Spotify track.
 * @returns {Promise<{metadata: Object|null, downloadUrl: string|null, apiName: string|null}>} - The track metadata, download URL, and name of the API that succeeded.
 */
async function tryDownloadSpotify(query) {
  for (const apiConfig of SPOTIFY_DOWNLOAD_APIS) {
    try {
      const fullUrl = apiConfig.urlBuilder(query);
      // console.log(`DEBUG: Intentando descargar Spotify desde ${apiConfig.name}: ${fullUrl}`); // For debugging

      const res = await fetch(fullUrl);
      if (!res.ok) {
        console.warn(`‚ö†Ô∏è API ${apiConfig.name} fall√≥ con estado: ${res.status}. Probando otra...`);
        continue;
      }

      const json = await res.json();
      // console.log(`DEBUG: Respuesta JSON de ${apiConfig.name}:`, json); // For debugging

      if (json.status && json.result?.downloadUrl && json.result?.metadata) {
        console.log(`‚úÖ Descarga de Spotify exitosa desde API: ${apiConfig.name}`);
        return {
          metadata: json.result.metadata,
          downloadUrl: json.result.downloadUrl,
          apiName: apiConfig.name
        };
      } else {
        console.warn(`‚ùå API ${apiConfig.name} no devolvi√≥ datos v√°lidos. Probando otra...`);
      }
    } catch (e) {
      console.error(`‚ö†Ô∏è Error al conectar con API ${apiConfig.name}: ${e.message || e}. Probando otra...`);
    }
  }
  console.error("‚õî Ninguna API de Spotify respondi√≥ correctamente o devolvi√≥ un enlace v√°lido.");
  return { metadata: null, downloadUrl: null, apiName: null };
}


let handler = async (m, { conn, args, command, usedPrefix }) => {
  const text = args.join(" ");
  if (!text) {
    // Mensaje de uso con estilo Shizuka
    return conn.sendMessage(m.chat, {
      text: `üîç *¬øQu√© canci√≥n de Spotify deseas buscar?*\nEscribe el nombre de la canci√≥n o artista.`,
      contextInfo: {
        externalAdReply: {
          title: "üéß Spotify Downloader",
          body: `Uso: ${usedPrefix + command} shakira soltera`,
          mediaType: 1,
          previewType: 0,
          mediaUrl: "http://googleusercontent.com/spotify.com/0", // URL gen√©rica para Spotify
          sourceUrl: "http://googleusercontent.com/spotify.com/0", // URL gen√©rica para Spotify
          thumbnailUrl: "https://raw.githubusercontent.com/Kone457/Nexus/refs/heads/main/Shizuka.jpg",
          renderLargerThumbnail: true,
        },
      },
    }, { quoted: m });
  }

  try {
    await m.react('‚åõ');

    // Mensaje de b√∫squeda inicial con estilo Shizuka
    await conn.sendMessage(m.chat, {
      text: `üî≠ *Shizuka est√° buscando tu canci√≥n de Spotify...*`,
      contextInfo: {
        externalAdReply: {
          title: "üéµ Explorando Spotify...",
          body: "‚è≥ Un momento...",
          thumbnailUrl: "https://raw.githubusercontent.com/Kone457/Nexus/refs/heads/main/Shizuka.jpg",
          mediaType: 1,
          previewType: 0,
          mediaUrl: "http://googleusercontent.com/spotify.com/0",
          sourceUrl: "http://googleusercontent.com/spotify.com/0",
          renderLargerThumbnail: true,
        },
      },
    }, { quoted: m });

    // Intenta descargar el audio de Spotify usando m√∫ltiples APIs
    const { metadata, downloadUrl, apiName } = await tryDownloadSpotify(text);

    if (!metadata || !downloadUrl) {
      // Mensaje de no encontrado con estilo Shizuka
      return conn.sendMessage(m.chat, {
        text: `‚ö†Ô∏è *No se encontraron resultados para tu b√∫squeda en Spotify:* "${text}".`,
        contextInfo: {
          externalAdReply: {
            title: "‚ùå B√∫squeda Fallida",
            body: "Intenta con un nombre diferente.",
            mediaType: 1,
            previewType: 0,
            mediaUrl: "http://googleusercontent.com/spotify.com/0",
            sourceUrl: "http://googleusercontent.com/spotify.com/0",
            thumbnailUrl: "https://raw.githubusercontent.com/Kone457/Nexus/refs/heads/main/Shizuka.jpg",
            renderLargerThumbnail: true,
          },
        },
      }, { quoted: m });
    }

    const { title, artist, duration, cover, url } = metadata;

    // Mensaje de informaci√≥n de la canci√≥n con estilo Shizuka
    const infoMessage = `
üéµ *T√≠tulo:* ${title}
üë§ *Artista:* ${artist}
‚è±Ô∏è *Duraci√≥n:* ${duration}
üåê *Spotify:* ${url}
`.trim();

    // Fetchear la imagen de la portada para el thumbnail
    const coverBuffer = (await conn.getFile(cover))?.data;

    await conn.sendMessage(m.chat, {
      text: infoMessage, // Usamos 'text' para el mensaje
      contextInfo: {
        externalAdReply: {
          title: "üé∂ Canci√≥n de Spotify Encontrada",
          body: "üéÅ Preparando tu MP3...",
          mediaType: 1,
          previewType: 0,
          mediaUrl: url, // URL de la canci√≥n de Spotify
          sourceUrl: url, // URL de la canci√≥n de Spotify
          thumbnail: coverBuffer, // Usamos el buffer de la portada
          renderLargerThumbnail: true,
        },
      },
    }, { quoted: m });

    // Enviar el audio
    await conn.sendMessage(m.chat, {
      audio: { url: downloadUrl },
      mimetype: 'audio/mpeg', // Aseguramos que sea mpeg para MP3
      ptt: false,
      fileName: `${title}.mp3`
    }, { quoted: m });

    await m.react('‚úÖ');

  } catch (e) {
    console.error("‚ùå Error en el handler de Spotify:", e);
    // Mensaje de error general con estilo Shizuka
    return conn.sendMessage(m.chat, {
      text: `‚ùå *Ocurri√≥ un error inesperado al procesar tu solicitud.*\nIntenta nuevamente m√°s tarde.`,
      contextInfo: {
        externalAdReply: {
          title: "üö® Error",
          body: "Algo sali√≥ mal.",
          mediaType: 1,
          previewType: 0,
          mediaUrl: "http://googleusercontent.com/spotify.com/0",
          sourceUrl: "http://googleusercontent.com/spotify.com/0",
          thumbnailUrl: "https://raw.githubusercontent.com/Kone457/Nexus/refs/heads/main/Shizuka.jpg",
          renderLargerThumbnail: true,
        },
      },
    }, { quoted: m });
  }
};

handler.help = ['play <nombre>'];
handler.tags = ['descargas'];
handler.command = /^playspotify$/i; // Cambiado a playspotify para evitar conflicto con el play de YouTube
handler.register = true;

export default handler;
